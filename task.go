package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"sync"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
type Order struct {
	ID          string    `json:"id"`
	UserID      string    `json:"user_id"`
	Products    []string  `json:"products"`
	TotalAmount float64   `json:"total_amount"`
	Status      string    `json:"status"` // pending, received, confirmed, completed, failed
	CreatedAt   time.Time `json:"created_at"`
	ConfirmedAt time.Time `json:"confirmed_at,omitempty"`
	CompletedAt time.Time `json:"completed_at,omitempty"`
}

type OrderRequest struct {
	UserID      string   `json:"user_id"`
	Products    []string `json:"products"`
	TotalAmount float64  `json:"total_amount"`
}

// PubSub –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤
type OrderPubSub struct {
	subscribers map[string][]chan Order
	mut         sync.RWMutex
}

func NewOrderPubSub() *OrderPubSub {
	return &OrderPubSub{
		subscribers: make(map[string][]chan Order),
	}
}

func (ps *OrderPubSub) Subscribe(event string) chan Order {
	ps.mut.Lock()
	defer ps.mut.Unlock()

	ch := make(chan Order, 10)
	ps.subscribers[event] = append(ps.subscribers[event], ch)
	return ch
}

func (ps *OrderPubSub) Publish(event string, order Order) {
	ps.mut.RLock()
	defer ps.mut.RUnlock()

	for _, ch := range ps.subscribers[event] {
		select {
		case ch <- order:
		default:
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø–æ–ª–Ω—ã–π
		}
	}
}

// –°–µ–º–∞—Ñ–æ—Ä—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
type Semaphore struct {
	tokens chan struct{}
}

func NewSemaphore(n int) *Semaphore {
	sem := &Semaphore{
		tokens: make(chan struct{}, n),
	}
	// –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–º–∞—Ñ–æ—Ä —Ç–æ–∫–µ–Ω–∞–º–∏
	for i := 0; i < n; i++ {
		sem.tokens <- struct{}{}
	}
	return sem
}

func (s *Semaphore) Acquire() {
	<-s.tokens
}

func (s *Semaphore) Release() {
	s.tokens <- struct{}{}
}

// –°–µ—Ä–≤–∏—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
type OrderReceivingService struct {
	semaphore *Semaphore
}

func NewOrderReceivingService() *OrderReceivingService {
	return &OrderReceivingService{
		semaphore: NewSemaphore(5), // –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –∑–∞–∫–∞–∑–æ–≤
	}
}

func (ors *OrderReceivingService) Process(order Order) (Order, error) {
	ors.semaphore.Acquire()
	defer ors.semaphore.Release()

	// –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
	time.Sleep(time.Duration(100+rand.Intn(100)) * time.Millisecond)

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
	if len(order.Products) == 0 {
		return order, fmt.Errorf("–∑–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
	}
	if order.TotalAmount <= 0 {
		return order, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞")
	}

	order.Status = "received"
	log.Printf("‚úÖ –ó–∞–∫–∞–∑ %s –ø—Ä–∏–Ω—è—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", order.ID, order.UserID)
	return order, nil
}

type OrderConfirmationService struct {
	semaphore *Semaphore
}

func NewOrderConfirmationService() *OrderConfirmationService {
	return &OrderConfirmationService{
		semaphore: NewSemaphore(3), // –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	}
}

func (ocs *OrderConfirmationService) Process(order Order) (Order, error) {
	ocs.semaphore.Acquire()
	defer ocs.semaphore.Release()

	// –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
	time.Sleep(time.Duration(150+rand.Intn(200)) * time.Millisecond)

	// –°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–∫–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (10% —à–∞–Ω—Å)
	if rand.Float32() < 0.1 {
		return order, fmt.Errorf("–∑–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π")
	}

	order.Status = "confirmed"
	order.ConfirmedAt = time.Now()
	log.Printf("‚úÖ –ó–∞–∫–∞–∑ %s –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Å—É–º–º–∞: %.2f", order.ID, order.TotalAmount)
	return order, nil
}

type OrderCompletionService struct {
	semaphore *Semaphore
}

func NewOrderCompletionService() *OrderCompletionService {
	return &OrderCompletionService{
		semaphore: NewSemaphore(4), // –ú–∞–∫—Å–∏–º—É–º 4 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	}
}

func (ocs *OrderCompletionService) Process(order Order) (Order, error) {
	ocs.semaphore.Acquire()
	defer ocs.semaphore.Release()

	// –ò–º–∏—Ç–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
	time.Sleep(time.Duration(80+rand.Intn(120)) * time.Millisecond)

	order.Status = "completed"
	order.CompletedAt = time.Now()
	log.Printf("üéâ –ó–∞–∫–∞–∑ %s –∑–∞–≤–µ—Ä—à–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", order.ID, order.UserID)
	return order, nil
}

// Producer-Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
func orderProducer(requests <-chan OrderRequest) <-chan Order {
	orders := make(chan Order, 20)

	go func() {
		for req := range requests {
			order := Order{
				ID:          fmt.Sprintf("order-%d", time.Now().UnixNano()),
				UserID:      req.UserID,
				Products:    req.Products,
				TotalAmount: req.TotalAmount,
				Status:      "pending",
				CreatedAt:   time.Now(),
			}
			orders <- order
		}
		close(orders)
	}()

	return orders
}

// Worker –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
func orderProcessingWorker(
	workerID int,
	stage string,
	orders <-chan Order,
	results chan<- Order,
	processor func(Order) (Order, error),
	pubSub *OrderPubSub,
) {
	for order := range orders {
		log.Printf("üéØ –≠—Ç–∞–ø '%s' (–≤–æ—Ä–∫–µ—Ä %d) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑ %s", stage, workerID, order.ID)

		processedOrder, err := processor(order)
		if err != nil {
			processedOrder.Status = "failed"
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ '%s' –¥–ª—è –∑–∞–∫–∞–∑–∞ %s: %v", stage, order.ID, err)
		}

		// –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
		event := fmt.Sprintf("order.%s", stage)
		pubSub.Publish(event, processedOrder)

		results <- processedOrder
	}
}

// Fan-in –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func fanInOrderResults(inputs ...<-chan Order) <-chan Order {
	var wg sync.WaitGroup
	out := make(chan Order)

	for _, input := range inputs {
		wg.Add(1)
		go func(ch <-chan Order) {
			defer wg.Done()
			for order := range ch {
				out <- order
			}
		}(input)
	}

	go func() {
		wg.Wait()
		close(out)
	}()
	return out
}

// Pipeline –¥–ª—è —Ç—Ä–µ—Ö —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
func createOrderPipeline(
	orders <-chan Order,
	receivingService *OrderReceivingService,
	confirmationService *OrderConfirmationService,
	completionService *OrderCompletionService,
	pubSub *OrderPubSub,
) <-chan Order {

	// –≠—Ç–∞–ø 1: –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞ (Fan-out —Å 3 –≤–æ—Ä–∫–µ—Ä–∞–º–∏)
	var receivingWorkers []<-chan Order

	for i := 1; i <= 3; i++ {
		workerOut := make(chan Order)
		go orderProcessingWorker(i, "received", orders, workerOut, receivingService.Process, pubSub)
		receivingWorkers = append(receivingWorkers, workerOut)
	}
	receivingCombined := fanInOrderResults(receivingWorkers...)

	// –≠—Ç–∞–ø 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (Fan-out —Å 2 –≤–æ—Ä–∫–µ—Ä–∞–º–∏)
	confirmationResults := make(chan Order, 10)
	var confirmationWorkers []<-chan Order

	go func() {
		for order := range receivingCombined {
			if order.Status == "received" {
				confirmationResults <- order
			}
		}
		close(confirmationResults)
	}()

	for i := 1; i <= 2; i++ {
		workerOut := make(chan Order)
		go orderProcessingWorker(i, "confirmed", confirmationResults, workerOut, confirmationService.Process, pubSub)
		confirmationWorkers = append(confirmationWorkers, workerOut)
	}
	confirmationCombined := fanInOrderResults(confirmationWorkers...)

	// –≠—Ç–∞–ø 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (Fan-out —Å 3 –≤–æ—Ä–∫–µ—Ä–∞–º–∏)
	completionResults := make(chan Order, 10)
	var completionWorkers []<-chan Order

	go func() {
		for order := range confirmationCombined {
			if order.Status == "confirmed" {
				completionResults <- order
			}
		}
		close(completionResults)
	}()

	for i := 1; i <= 3; i++ {
		workerOut := make(chan Order)
		go orderProcessingWorker(i, "completed", completionResults, workerOut, completionService.Process, pubSub)
		completionWorkers = append(completionWorkers, workerOut)
	}

	return fanInOrderResults(completionWorkers...)
}

// HTTP handlers
type OrderService struct {
	pubSub              *OrderPubSub
	receivingService    *OrderReceivingService
	confirmationService *OrderConfirmationService
	completionService   *OrderCompletionService
	orderRequests       chan OrderRequest
	orderResults        chan Order
}

func NewOrderService() *OrderService {
	os := &OrderService{
		pubSub:              NewOrderPubSub(),
		receivingService:    NewOrderReceivingService(),
		confirmationService: NewOrderConfirmationService(),
		completionService:   NewOrderCompletionService(),
		orderRequests:       make(chan OrderRequest, 50),
		orderResults:        make(chan Order, 50),
	}

	os.startProcessing()
	return os
}

func (os *OrderService) startProcessing() {
	// Producer
	orders := orderProducer(os.orderRequests)

	// Pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
	pipelineResults := createOrderPipeline(
		orders,
		os.receivingService,
		os.confirmationService,
		os.completionService,
		os.pubSub,
	)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	go func() {
		for result := range pipelineResults {
			os.orderResults <- result
			log.Printf("üì¶ –ó–∞–∫–∞–∑ %s –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: %s", result.ID, result.Status)
		}
	}()
}

func (os *OrderService) CreateOrderHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	var req OrderRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π JSON", http.StatusBadRequest)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª –ø—Ä–æ–¥—é—Å–µ—Ä–∞
	os.orderRequests <- req

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"status":  "accepted",
		"message": "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
	})
}

func (os *OrderService) EventsHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/event-stream")
	w.Header().Set("Cache-Control", "no-cache")
	w.Header().Set("Connection", "keep-alive")
	w.Header().Set("Access-Control-Allow-Origin", "*")

	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫–∞–∑–æ–≤
	events := os.pubSub.Subscribe("order.received")
	confirmedEvents := os.pubSub.Subscribe("order.confirmed")
	completedEvents := os.pubSub.Subscribe("order.completed")

	// Fan-in —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
	allEvents := make(chan Order, 10)

	go func() {
		for event := range events {
			allEvents <- event
		}
	}()

	go func() {
		for event := range confirmedEvents {
			allEvents <- event
		}
	}()

	go func() {
		for event := range completedEvents {
			allEvents <- event
		}
	}()

	for {
		select {
		case order := <-allEvents:
			data, _ := json.Marshal(order)
			fmt.Fprintf(w, "event: %s\n", order.Status)
			fmt.Fprintf(w, "data: %s\n\n", string(data))
			if flusher, ok := w.(http.Flusher); ok {
				flusher.Flush()
			}

		case <-r.Context().Done():
			return
		}
	}
}

func (os *OrderService) StatsHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	stats := map[string]interface{}{
		"service": "Order Processing Service",
		"stages": []map[string]interface{}{
			{
				"name":           "Order Receiving",
				"max_workers":    5,
				"active_workers": 3,
			},
			{
				"name":           "Order Confirmation",
				"max_workers":    3,
				"active_workers": 2,
			},
			{
				"name":           "Order Completion",
				"max_workers":    4,
				"active_workers": 3,
			},
		},
		"timestamp": time.Now(),
	}

	json.NewEncoder(w).Encode(stats)
}

func main() {
	rand.Seed(time.Now().UnixNano())
	service := NewOrderService()

	http.HandleFunc("/order", service.CreateOrderHandler)
	http.HandleFunc("/events", service.EventsHandler)
	http.HandleFunc("/stats", service.StatsHandler)

	// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ templates
	http.Handle("/", http.FileServer(http.Dir("./templates")))

	log.Println("üöÄ –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")
	log.Println("üìù Endpoints:")
	log.Println("   POST /order - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
	log.Println("   GET  /events - –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π SSE")
	log.Println("   GET  /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞")
	log.Println("   GET  / - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")

	log.Fatal(http.ListenAndServe(":8080", nil))
}
